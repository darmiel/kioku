// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: services/testSrs/proto/testSrs.proto

package testSrs

import (
	fmt "fmt"
	proto1 "github.com/kioku-project/kioku/pkg/proto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TestSrs service

func NewTestSrsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TestSrs service

type TestSrsService interface {
	Push(ctx context.Context, in *proto1.SrsPushRequest, opts ...client.CallOption) (*proto1.Success, error)
	Pull(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Card, error)
	AddUserCardBinding(ctx context.Context, in *proto1.BindingRequest, opts ...client.CallOption) (*proto1.Success, error)
	GetDeckCardsDue(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.UserDueResponse, error)
	GetUserCardsDue(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*proto1.UserDueResponse, error)
}

type testSrsService struct {
	c    client.Client
	name string
}

func NewTestSrsService(name string, c client.Client) TestSrsService {
	return &testSrsService{
		c:    c,
		name: name,
	}
}

func (c *testSrsService) Push(ctx context.Context, in *proto1.SrsPushRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "TestSrs.Push", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSrsService) Pull(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Card, error) {
	req := c.c.NewRequest(c.name, "TestSrs.Pull", in)
	out := new(proto1.Card)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSrsService) AddUserCardBinding(ctx context.Context, in *proto1.BindingRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "TestSrs.AddUserCardBinding", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSrsService) GetDeckCardsDue(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.UserDueResponse, error) {
	req := c.c.NewRequest(c.name, "TestSrs.GetDeckCardsDue", in)
	out := new(proto1.UserDueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSrsService) GetUserCardsDue(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*proto1.UserDueResponse, error) {
	req := c.c.NewRequest(c.name, "TestSrs.GetUserCardsDue", in)
	out := new(proto1.UserDueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestSrs service

type TestSrsHandler interface {
	Push(context.Context, *proto1.SrsPushRequest, *proto1.Success) error
	Pull(context.Context, *proto1.DeckRequest, *proto1.Card) error
	AddUserCardBinding(context.Context, *proto1.BindingRequest, *proto1.Success) error
	GetDeckCardsDue(context.Context, *proto1.DeckRequest, *proto1.UserDueResponse) error
	GetUserCardsDue(context.Context, *proto1.User, *proto1.UserDueResponse) error
}

func RegisterTestSrsHandler(s server.Server, hdlr TestSrsHandler, opts ...server.HandlerOption) error {
	type testSrs interface {
		Push(ctx context.Context, in *proto1.SrsPushRequest, out *proto1.Success) error
		Pull(ctx context.Context, in *proto1.DeckRequest, out *proto1.Card) error
		AddUserCardBinding(ctx context.Context, in *proto1.BindingRequest, out *proto1.Success) error
		GetDeckCardsDue(ctx context.Context, in *proto1.DeckRequest, out *proto1.UserDueResponse) error
		GetUserCardsDue(ctx context.Context, in *proto1.User, out *proto1.UserDueResponse) error
	}
	type TestSrs struct {
		testSrs
	}
	h := &testSrsHandler{hdlr}
	return s.Handle(s.NewHandler(&TestSrs{h}, opts...))
}

type testSrsHandler struct {
	TestSrsHandler
}

func (h *testSrsHandler) Push(ctx context.Context, in *proto1.SrsPushRequest, out *proto1.Success) error {
	return h.TestSrsHandler.Push(ctx, in, out)
}

func (h *testSrsHandler) Pull(ctx context.Context, in *proto1.DeckRequest, out *proto1.Card) error {
	return h.TestSrsHandler.Pull(ctx, in, out)
}

func (h *testSrsHandler) AddUserCardBinding(ctx context.Context, in *proto1.BindingRequest, out *proto1.Success) error {
	return h.TestSrsHandler.AddUserCardBinding(ctx, in, out)
}

func (h *testSrsHandler) GetDeckCardsDue(ctx context.Context, in *proto1.DeckRequest, out *proto1.UserDueResponse) error {
	return h.TestSrsHandler.GetDeckCardsDue(ctx, in, out)
}

func (h *testSrsHandler) GetUserCardsDue(ctx context.Context, in *proto1.User, out *proto1.UserDueResponse) error {
	return h.TestSrsHandler.GetUserCardsDue(ctx, in, out)
}
