// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/loginservice.proto

package loginservice

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Loginservice service

func NewLoginserviceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "Loginservice.Login",
			Path:    []string{"/api/login"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
	}
}

// Client API for Loginservice service

type LoginserviceService interface {
	Login(ctx context.Context, in *LoginserviceRequest, opts ...client.CallOption) (*LoginserviceResponse, error)
}

type loginserviceService struct {
	c    client.Client
	name string
}

func NewLoginserviceService(name string, c client.Client) LoginserviceService {
	return &loginserviceService{
		c:    c,
		name: name,
	}
}

func (c *loginserviceService) Login(ctx context.Context, in *LoginserviceRequest, opts ...client.CallOption) (*LoginserviceResponse, error) {
	req := c.c.NewRequest(c.name, "Loginservice.Login", in)
	out := new(LoginserviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Loginservice service

type LoginserviceHandler interface {
	Login(context.Context, *LoginserviceRequest, *LoginserviceResponse) error
}

func RegisterLoginserviceHandler(s server.Server, hdlr LoginserviceHandler, opts ...server.HandlerOption) error {
	type loginservice interface {
		Login(ctx context.Context, in *LoginserviceRequest, out *LoginserviceResponse) error
	}
	type Loginservice struct {
		loginservice
	}
	h := &loginserviceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Loginservice.Login",
		Path:    []string{"/api/login"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Loginservice{h}, opts...))
}

type loginserviceHandler struct {
	LoginserviceHandler
}

func (h *loginserviceHandler) Login(ctx context.Context, in *LoginserviceRequest, out *LoginserviceResponse) error {
	return h.LoginserviceHandler.Login(ctx, in, out)
}
