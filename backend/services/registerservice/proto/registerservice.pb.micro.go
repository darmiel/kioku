// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/registerservice.proto

package registerservice

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Registerservice service

func NewRegisterserviceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "Registerservice.Register",
			Path:    []string{"/api/register"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
	}
}

// Client API for Registerservice service

type RegisterserviceService interface {
	Register(ctx context.Context, in *RegisterserviceRequest, opts ...client.CallOption) (*RegisterserviceResponse, error)
}

type registerserviceService struct {
	c    client.Client
	name string
}

func NewRegisterserviceService(name string, c client.Client) RegisterserviceService {
	return &registerserviceService{
		c:    c,
		name: name,
	}
}

func (c *registerserviceService) Register(ctx context.Context, in *RegisterserviceRequest, opts ...client.CallOption) (*RegisterserviceResponse, error) {
	req := c.c.NewRequest(c.name, "Registerservice.Register", in)
	out := new(RegisterserviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registerservice service

type RegisterserviceHandler interface {
	Register(context.Context, *RegisterserviceRequest, *RegisterserviceResponse) error
}

func RegisterRegisterserviceHandler(s server.Server, hdlr RegisterserviceHandler, opts ...server.HandlerOption) error {
	type registerservice interface {
		Register(ctx context.Context, in *RegisterserviceRequest, out *RegisterserviceResponse) error
	}
	type Registerservice struct {
		registerservice
	}
	h := &registerserviceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Registerservice.Register",
		Path:    []string{"/api/register"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Registerservice{h}, opts...))
}

type registerserviceHandler struct {
	RegisterserviceHandler
}

func (h *registerserviceHandler) Register(ctx context.Context, in *RegisterserviceRequest, out *RegisterserviceResponse) error {
	return h.RegisterserviceHandler.Register(ctx, in, out)
}
