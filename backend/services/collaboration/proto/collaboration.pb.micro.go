// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/collaboration.proto

package collaboration

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Collaboration service

func NewCollaborationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Collaboration service

type CollaborationService interface {
	GetGroupInvitations(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*GroupInvitationsResponse, error)
	ManageGroupInvitation(ctx context.Context, in *ManageGroupInvitationRequest, opts ...client.CallOption) (*SuccessResponse, error)
	GetUserGroups(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*UserGroupsResponse, error)
	CreateNewGroupWithAdmin(ctx context.Context, in *CreateGroupRequest, opts ...client.CallOption) (*IDResponse, error)
	GetGroup(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*GroupWithUserRole, error)
	ModifyGroup(ctx context.Context, in *ModifyGroupRequest, opts ...client.CallOption) (*SuccessResponse, error)
	DeleteGroup(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*SuccessResponse, error)
	GetGroupMembers(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*GroupMembersResponse, error)
	GetGroupMemberRequests(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*GroupMemberAdmissionResponse, error)
	ManageGroupMemberRequest(ctx context.Context, in *ManageGroupMemberRequestRequest, opts ...client.CallOption) (*SuccessResponse, error)
	RequestToJoinGroup(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*SuccessResponse, error)
	GetInvitationsForGroup(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*GroupMemberAdmissionResponse, error)
	InviteUserToGroup(ctx context.Context, in *GroupInvitationRequest, opts ...client.CallOption) (*SuccessResponse, error)
	GetGroupUserRole(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*GroupRoleResponse, error)
	FindGroupByID(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*Group, error)
}

type collaborationService struct {
	c    client.Client
	name string
}

func NewCollaborationService(name string, c client.Client) CollaborationService {
	return &collaborationService{
		c:    c,
		name: name,
	}
}

func (c *collaborationService) GetGroupInvitations(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*GroupInvitationsResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetGroupInvitations", in)
	out := new(GroupInvitationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) ManageGroupInvitation(ctx context.Context, in *ManageGroupInvitationRequest, opts ...client.CallOption) (*SuccessResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.ManageGroupInvitation", in)
	out := new(SuccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetUserGroups(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*UserGroupsResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetUserGroups", in)
	out := new(UserGroupsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) CreateNewGroupWithAdmin(ctx context.Context, in *CreateGroupRequest, opts ...client.CallOption) (*IDResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.CreateNewGroupWithAdmin", in)
	out := new(IDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetGroup(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*GroupWithUserRole, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetGroup", in)
	out := new(GroupWithUserRole)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) ModifyGroup(ctx context.Context, in *ModifyGroupRequest, opts ...client.CallOption) (*SuccessResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.ModifyGroup", in)
	out := new(SuccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) DeleteGroup(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*SuccessResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.DeleteGroup", in)
	out := new(SuccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetGroupMembers(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*GroupMembersResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetGroupMembers", in)
	out := new(GroupMembersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetGroupMemberRequests(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*GroupMemberAdmissionResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetGroupMemberRequests", in)
	out := new(GroupMemberAdmissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) ManageGroupMemberRequest(ctx context.Context, in *ManageGroupMemberRequestRequest, opts ...client.CallOption) (*SuccessResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.ManageGroupMemberRequest", in)
	out := new(SuccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) RequestToJoinGroup(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*SuccessResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.RequestToJoinGroup", in)
	out := new(SuccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetInvitationsForGroup(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*GroupMemberAdmissionResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetInvitationsForGroup", in)
	out := new(GroupMemberAdmissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) InviteUserToGroup(ctx context.Context, in *GroupInvitationRequest, opts ...client.CallOption) (*SuccessResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.InviteUserToGroup", in)
	out := new(SuccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetGroupUserRole(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*GroupRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetGroupUserRole", in)
	out := new(GroupRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) FindGroupByID(ctx context.Context, in *GroupRequest, opts ...client.CallOption) (*Group, error) {
	req := c.c.NewRequest(c.name, "Collaboration.FindGroupByID", in)
	out := new(Group)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Collaboration service

type CollaborationHandler interface {
	GetGroupInvitations(context.Context, *UserIDRequest, *GroupInvitationsResponse) error
	ManageGroupInvitation(context.Context, *ManageGroupInvitationRequest, *SuccessResponse) error
	GetUserGroups(context.Context, *UserIDRequest, *UserGroupsResponse) error
	CreateNewGroupWithAdmin(context.Context, *CreateGroupRequest, *IDResponse) error
	GetGroup(context.Context, *GroupRequest, *GroupWithUserRole) error
	ModifyGroup(context.Context, *ModifyGroupRequest, *SuccessResponse) error
	DeleteGroup(context.Context, *GroupRequest, *SuccessResponse) error
	GetGroupMembers(context.Context, *GroupRequest, *GroupMembersResponse) error
	GetGroupMemberRequests(context.Context, *GroupRequest, *GroupMemberAdmissionResponse) error
	ManageGroupMemberRequest(context.Context, *ManageGroupMemberRequestRequest, *SuccessResponse) error
	RequestToJoinGroup(context.Context, *GroupRequest, *SuccessResponse) error
	GetInvitationsForGroup(context.Context, *GroupRequest, *GroupMemberAdmissionResponse) error
	InviteUserToGroup(context.Context, *GroupInvitationRequest, *SuccessResponse) error
	GetGroupUserRole(context.Context, *GroupRequest, *GroupRoleResponse) error
	FindGroupByID(context.Context, *GroupRequest, *Group) error
}

func RegisterCollaborationHandler(s server.Server, hdlr CollaborationHandler, opts ...server.HandlerOption) error {
	type collaboration interface {
		GetGroupInvitations(ctx context.Context, in *UserIDRequest, out *GroupInvitationsResponse) error
		ManageGroupInvitation(ctx context.Context, in *ManageGroupInvitationRequest, out *SuccessResponse) error
		GetUserGroups(ctx context.Context, in *UserIDRequest, out *UserGroupsResponse) error
		CreateNewGroupWithAdmin(ctx context.Context, in *CreateGroupRequest, out *IDResponse) error
		GetGroup(ctx context.Context, in *GroupRequest, out *GroupWithUserRole) error
		ModifyGroup(ctx context.Context, in *ModifyGroupRequest, out *SuccessResponse) error
		DeleteGroup(ctx context.Context, in *GroupRequest, out *SuccessResponse) error
		GetGroupMembers(ctx context.Context, in *GroupRequest, out *GroupMembersResponse) error
		GetGroupMemberRequests(ctx context.Context, in *GroupRequest, out *GroupMemberAdmissionResponse) error
		ManageGroupMemberRequest(ctx context.Context, in *ManageGroupMemberRequestRequest, out *SuccessResponse) error
		RequestToJoinGroup(ctx context.Context, in *GroupRequest, out *SuccessResponse) error
		GetInvitationsForGroup(ctx context.Context, in *GroupRequest, out *GroupMemberAdmissionResponse) error
		InviteUserToGroup(ctx context.Context, in *GroupInvitationRequest, out *SuccessResponse) error
		GetGroupUserRole(ctx context.Context, in *GroupRequest, out *GroupRoleResponse) error
		FindGroupByID(ctx context.Context, in *GroupRequest, out *Group) error
	}
	type Collaboration struct {
		collaboration
	}
	h := &collaborationHandler{hdlr}
	return s.Handle(s.NewHandler(&Collaboration{h}, opts...))
}

type collaborationHandler struct {
	CollaborationHandler
}

func (h *collaborationHandler) GetGroupInvitations(ctx context.Context, in *UserIDRequest, out *GroupInvitationsResponse) error {
	return h.CollaborationHandler.GetGroupInvitations(ctx, in, out)
}

func (h *collaborationHandler) ManageGroupInvitation(ctx context.Context, in *ManageGroupInvitationRequest, out *SuccessResponse) error {
	return h.CollaborationHandler.ManageGroupInvitation(ctx, in, out)
}

func (h *collaborationHandler) GetUserGroups(ctx context.Context, in *UserIDRequest, out *UserGroupsResponse) error {
	return h.CollaborationHandler.GetUserGroups(ctx, in, out)
}

func (h *collaborationHandler) CreateNewGroupWithAdmin(ctx context.Context, in *CreateGroupRequest, out *IDResponse) error {
	return h.CollaborationHandler.CreateNewGroupWithAdmin(ctx, in, out)
}

func (h *collaborationHandler) GetGroup(ctx context.Context, in *GroupRequest, out *GroupWithUserRole) error {
	return h.CollaborationHandler.GetGroup(ctx, in, out)
}

func (h *collaborationHandler) ModifyGroup(ctx context.Context, in *ModifyGroupRequest, out *SuccessResponse) error {
	return h.CollaborationHandler.ModifyGroup(ctx, in, out)
}

func (h *collaborationHandler) DeleteGroup(ctx context.Context, in *GroupRequest, out *SuccessResponse) error {
	return h.CollaborationHandler.DeleteGroup(ctx, in, out)
}

func (h *collaborationHandler) GetGroupMembers(ctx context.Context, in *GroupRequest, out *GroupMembersResponse) error {
	return h.CollaborationHandler.GetGroupMembers(ctx, in, out)
}

func (h *collaborationHandler) GetGroupMemberRequests(ctx context.Context, in *GroupRequest, out *GroupMemberAdmissionResponse) error {
	return h.CollaborationHandler.GetGroupMemberRequests(ctx, in, out)
}

func (h *collaborationHandler) ManageGroupMemberRequest(ctx context.Context, in *ManageGroupMemberRequestRequest, out *SuccessResponse) error {
	return h.CollaborationHandler.ManageGroupMemberRequest(ctx, in, out)
}

func (h *collaborationHandler) RequestToJoinGroup(ctx context.Context, in *GroupRequest, out *SuccessResponse) error {
	return h.CollaborationHandler.RequestToJoinGroup(ctx, in, out)
}

func (h *collaborationHandler) GetInvitationsForGroup(ctx context.Context, in *GroupRequest, out *GroupMemberAdmissionResponse) error {
	return h.CollaborationHandler.GetInvitationsForGroup(ctx, in, out)
}

func (h *collaborationHandler) InviteUserToGroup(ctx context.Context, in *GroupInvitationRequest, out *SuccessResponse) error {
	return h.CollaborationHandler.InviteUserToGroup(ctx, in, out)
}

func (h *collaborationHandler) GetGroupUserRole(ctx context.Context, in *GroupRequest, out *GroupRoleResponse) error {
	return h.CollaborationHandler.GetGroupUserRole(ctx, in, out)
}

func (h *collaborationHandler) FindGroupByID(ctx context.Context, in *GroupRequest, out *Group) error {
	return h.CollaborationHandler.FindGroupByID(ctx, in, out)
}
